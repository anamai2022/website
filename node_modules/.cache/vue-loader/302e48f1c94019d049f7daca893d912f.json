{"remainingRequest":"/Users/thanitnetprokaew/Desktop/yfhs/website/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/thanitnetprokaew/Desktop/yfhs/website/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/thanitnetprokaew/Desktop/yfhs/website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/thanitnetprokaew/Desktop/yfhs/website/src/components/widgets/Landing.vue?vue&type=template&id=05b23d37&","dependencies":[{"path":"/Users/thanitnetprokaew/Desktop/yfhs/website/src/components/widgets/Landing.vue","mtime":1655818940893},{"path":"/Users/thanitnetprokaew/Desktop/yfhs/website/node_modules/cache-loader/dist/cjs.js","mtime":1647752128109},{"path":"/Users/thanitnetprokaew/Desktop/yfhs/website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647752181454},{"path":"/Users/thanitnetprokaew/Desktop/yfhs/website/node_modules/cache-loader/dist/cjs.js","mtime":1647752128109},{"path":"/Users/thanitnetprokaew/Desktop/yfhs/website/node_modules/vue-loader/lib/index.js","mtime":1647752181454}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF92bS5fbSgwKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgInNlY3Rpb24iLAogICAgICB7IHN0YXRpY0NsYXNzOiAic2VjdGlvbiBoZXJvLXNlY3Rpb24iLCBhdHRyczogeyBpZDogImxhbmRpbmciIH0gfSwKICAgICAgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1sZy0xMiIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIgbWItNSIgfSwgWwogICAgICAgICAgICAgICAgX2MoImg0IiwgW192bS5fdigiS2V5IGZlYXR1cmVzIG9mIHRoZSBwcm9kdWN0IildKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IGFsaWduLWl0ZW1zLWNlbnRlciBwdC00IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTYgY29sLXNtLTgiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctZmx1aWQgbXgtYXV0byBkLWJsb2NrIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltYWdlcy9jcnlwdG8vZmVhdHVyZXMtaW1nL2ltZy0xLnBuZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNSBtbC1hdXRvIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtdC00IG10LW1kLWF1dG8iIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtYi0yIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJoNCIsIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkJlc3QgSUNPIGZvciB5b3VyIGNyeXB0b2N1cnJlbmN5IGJ1c2luZXNzIikKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIklmIHNldmVyYWwgbGFuZ3VhZ2VzIGNvYWxlc2NlLCB0aGUgZ3JhbW1hciBvZiB0aGUgcmVzdWx0aW5nIGxhbmd1YWdlIGlzIG1vcmUgc2ltcGxlIGFuZCByZWd1bGFyIHRoYW4gb2YgdGhlIGluZGl2aWR1YWwgd2lsbCBiZSBtb3JlIHNpbXBsZSBhbmQgcmVndWxhciB0aGFuIHRoZSBleGlzdGluZy4iCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIG10LTQiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIklmIHNldmVyYWwgbGFuZ3VhZ2VzIGNvYWxlc2NlLCB0aGUgZ3JhbW1hciBvZiB0aGUgcmVzdWx0aW5nIHRoYXQgb2YgdGhlIGluZGl2aWR1YWwgbmV3IGNvbW1vbiBsYW5ndWFnZSB3aWxsIGJlIG1vcmUgc2ltcGxlIGFuZCByZWd1bGFyIHRoYW4gdGhlIGV4aXN0aW5nLiIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJtYi00IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIkl0IHdvdWxkIGJlIG5lY2Vzc2FyeSB0byBoYXZlIHVuaWZvcm0gcHJvbnVuY2lhdGlvbi4iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJidXR0b24taXRlbXMiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLXN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiamF2YXNjcmlwdDogdm9pZCgwKTsiIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJSZWFkIE1vcmUiKV0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogImphdmFzY3JpcHQ6IHZvaWQoMCk7IiB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiSG93IEl0IHdvcmsiKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IGFsaWduLWl0ZW1zLWNlbnRlciBtdC01IHB0LW1kLTUiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNSIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibXQtNCBtdC1tZC0wIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbWItMiIgfSwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZlYXR1cmVzLW51bWJlciBmdy1zZW1pYm9sZCBkaXNwbGF5LTQgbWUtMyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjAyIildCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJtYi0wIiB9LCBbX3ZtLl92KCJXYWxsZXQiKV0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJJdCB3aWxsIGJlIGFzIHNpbXBsZSBhcyBPY2NpZGVudGFsOyBpbiBmYWN0LCBpdCB3aWxsIGJlIE9jY2lkZW50YWwuIFRvIGFuIEVuZ2xpc2ggcGVyc29uLCBpdCB3aWxsIHNlZW0gbGlrZSBzaW1wbGlmaWVkIEVuZ2xpc2gsIGFzIGEgc2tlcHRpY2FsIENhbWJyaWRnZSBmcmllbmQuIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCBtdC00IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogIm1iLTIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWRpIG1kaS1jaXJjbGUtbWVkaXVtIHRleHQtc3VjY2VzcyBtZS0xIgogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiRG9uZWMgcGVkZSBqdXN0byB2ZWwgYWxpcXVldCAiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1kaSBtZGktY2lyY2xlLW1lZGl1bSB0ZXh0LXN1Y2Nlc3MgbWUtMSIKICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkFlbmVhbiBldCBuaXNsIHNhZ2l0dGlzICIpCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC02IGNvbC1zbS04IG1zLW1kLWF1dG8iIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm10LTQgbWUtbWQtMCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctZmx1aWQgbXgtYXV0byBkLWJsb2NrIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltYWdlcy9jcnlwdG8vZmVhdHVyZXMtaW1nL2ltZy0yLnBuZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdCiAgICApCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}