{"remainingRequest":"/Users/thanitnetprokaew/Desktop/yfhs/website/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/thanitnetprokaew/Desktop/yfhs/website/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/thanitnetprokaew/Desktop/yfhs/website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/thanitnetprokaew/Desktop/yfhs/website/src/components/widgets/Step5.vue?vue&type=template&id=6a2d01ee&scoped=true&","dependencies":[{"path":"/Users/thanitnetprokaew/Desktop/yfhs/website/src/components/widgets/Step5.vue","mtime":1655874575434},{"path":"/Users/thanitnetprokaew/Desktop/yfhs/website/node_modules/cache-loader/dist/cjs.js","mtime":1647752128109},{"path":"/Users/thanitnetprokaew/Desktop/yfhs/website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647752181454},{"path":"/Users/thanitnetprokaew/Desktop/yfhs/website/node_modules/cache-loader/dist/cjs.js","mtime":1647752128109},{"path":"/Users/thanitnetprokaew/Desktop/yfhs/website/node_modules/vue-loader/lib/index.js","mtime":1647752181454}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}